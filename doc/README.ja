instant-deployer

名前
 instant-deployer - シンプルで汎用的なデプロイツール

書式
 bin/deploy.sh

説明
 instant-deployer はシンプルで汎用的なデプロイツール
である。主に以下のような特徴がある。

1) 設定ファイルを記述するだけで、リポジトリからソースを
取得しサーバーに配備してプロセス再起動できるようになる。

2) 純粋に ssh/rsync のみを利用してデプロイをおこなう。
サーバーサイドに追加のソフトウェアが不要である。

3) 機能がモジュール分割されており、柔軟な拡張が可能。


==========
イメージ図
==========

本スクリプトを置いたマシンをローカルホストとし
リポジトリとデプロイ先サーバーがそれぞれ他に
存在する状態を想定している。

+----------------------+
|    リ ポ ジ ト リ    | svn/git など  
+----------------------+
           |
           | svn up/git pull 等で更新する
           |
+----------------------+
|    ローカルホスト    | Linux/Mac/cygwin 等
+----------------------+ 設定ファイルを読み込む
           |
           | rsync --delete でファイルを同期する
           | ssh でサーバープロセスを再起動する
           |
+----------------------+
|  デプロイ先サーバー  | ssh/rsync 以外不要
+----------------------+


設定ファイルにはリポジトリからチェックアウトした
ソースコードのパス、リモートホストのディレクトリ
などを指定する。

サーバーのプロセス再起動コマンドも設定ファイルで
指定する。 apache だけでなく nginx や tomcat 、
DB のマイグレーション等も指定することができる。

設定ファイルの概要は次項に示す。


===============================
設定ファイル config/deploy.conf
===============================

 instant-deployer の設定ファイルであり全体の動作を定義
する。パラメータは以下のように一行ずつ定義する。

値=定義
# が出現した場合残りはコメント扱いとなる。

定義が複数の場合は " " で囲みスペースを開けて羅列する。

設定の中にはパスワードそのものを記述することもある。
したがって、この設定ファイルは管理担当ユーザーのみ
アクセス可能となるようパーミッションを設定することが
望ましい。


==============
主要な設定項目
==============

設定ファイル config/sync.conf は単なる実行形式の
スクリプトとして読み込まれるため柔軟な設定が可能である。

主な設定項目としては以下がある。

DRY_RUN
rsync を実際に実行せずテスト実行する場合は true にする。
この場合、リモートコマンドも実行されない。結果はログに
出力される。全体の動作を確認したいときに便利である。

SOURCE
ローカルのソースコードが格納されたディレクトリ。
あらかじめリポジトリからチェックアウトしておく必要がある。

UPDATE_COMMAND
ローカルのソースコードを最新化するためのコマンド。
git の場合 git pull 
svn の場合 svn up
他のバージョン管理ソフトウェアを指定しても良い。

REMOTE_USER
REMOTE_HOST
デプロイ先のユーザー名とホスト名を指定する。

REMOTE_DIR
デプロイ先のディレクトリ名を指定する。

REMOTE_PERMISSION
デプロイ先のディレクトリのパーミッションを設定するコマンド。
chown/chmod や SELinux のコマンド等をワンライナーで指定する。

REMOTE_COMMAND
デプロイ先のサービスを再起動するためのリモートコマンド
(例) デプロイ後に CentOS の apache を再起動する例
="ssh -l $REMOTE_USER $REMOTE_HOST service httpd restart"
この際、通常の ssh や rsh でパスワード認証無しでリモートに
コマンドを投げられるよう公開鍵認証を設定しておく必要がある。

EXCLUDEFILE
デプロイの対象外とするファイル名を羅列したファイル。
ここにディレクトリや拡張子などを記述すると、マッチした
ファイルはデプロイ対象から除外される。

JOBLOG
実行結果のログファイル名を指定する。
ログは追記される。

ADMIN_MAIL_ADDRESS
(オプション)
ここにシステム管理者のメールアドレスを指定した場合
ログがメール送信される。
バッチ処理等で自動デプロイする際に便利である。


========
動作環境
========

 ローカルホストに一般的な GNU/Linux 及び UNIX 互換環境
が必要となる。Windows の場合は cygwin または VMware 等
の仮想化技術を利用することを推奨する。
 Mac や Linux の場合はそのまま動作する。


一般的な GNU/Linux 及び UNIX 互換環境とは以下を指す。

- Red Hat Enterprise Linux 5/6
- CentOS 5/6
- Scientific Linux 6
- Debian GNU/Linux 5.0/6.0
- Ubuntu 10.04 LTS/11.10
- Solaris 10/11
- Mac OS X 10.6/10.7


リポジトリは git/svn に対応する。また他に CUI で
アクセス可能なプロトコルであれば何でも利用できる。

サーバーサイドは ssh と rsync がインストールされて
いれば何でも利用できる。

デプロイするアプリケーションは Ruby on Rails を
はじめ PHP や Java 、単なる HTML/CSS や画像、その他
どのような言語でも特に制約は無い。

リポジトリとローカルホストは同一のホストでも良い。


========
全体構成
========

主なディレクトリとファイルの構成は以下の通りである。
.
|
+-bin 
|   deploy.sh
|     実行ファイル。
|     このスクリプトを起動することで動作する。
|     設定ファイルを読み込み loader.sh を動作させ
|     その標準出力及びエラー出力をロギングする。
|
+-conf
|   deploy.conf
|     全体の動作を決定する設定ファイル。
|
+-etc
|   deploy_exclude
|     処理対象外を羅列したファイル。
|     一行ずつファイル名または拡張子を記述する。
|     いずれかにマッチしたファイルは処理の対象外となる。
|
+-lib
|   loader.sh
|     各モジュールを個別に読み込み、全体の動作を統括する。
|   updater.sh
|     リポジトリからリソースを取得してローカルを最新化する。
|   deployer.sh
|     rsync を利用してリモートサーバーにファイルを転送する。
|   permission.sh
|     デプロイ後のディレクトリのパーミッションを設定する。
|   reloader.sh
|     リモートホストのプロセスを再起動する。
|
+-test
|   test.conf
|     テスト実行時に読み込まれる。
|     このディレクトリにはテストのためのコードが置かれる。
|
+-doc
|   README.ja
|     本ドキュメント。
|
+ install.sh
    引数で指定したディレクトリに本ソフトウェアを 
    インストールする。
    引数が無い場合 /opt/instant-deployer にインストールする。


==============
インストーラー
==============

 instant-deployer はそのままでも動作するが、システムに
インストールして自動実行することもできる。この場合、
付属のインストーラーを利用することができる。

 installer.sh [dir] [nosudo]

第 1 引数にはインストール先のディレクトリを指定する。
デフォルトは /opt/instant-deployer である。
このディレクトリは通常 root 権限が無いと書き込めない
ため、内部的に sudo を利用する。

第 2 引数には nosudo を指定する。
たとえば第 1 引数に ~/local/instant-deployer を指定した
場合は sudo を利用する必要が無い。

(ユーザーのホームディレクトリにインストールする例)
installer.sh ~/local/instant-deployer nosudo

(/usr/local/instant-deployer にインストールする例)
installer.sh /usr/local/instant-deployer

(/opt/instant-deployer にインストールする例)
installer.sh

インストール完了後、設定ファイルを編集し、
cron で自動実行したり Jenkins と連動させる等して
デプロイを自動実行することができる。


==================
複数環境の使い分け
==================

たとえば branch を production 環境に、
trunk を development 環境というように
複数のデプロイ設定を使い分けることができる。

この場合、まず準備として trunk と branch の
2 つを別々にチェックアウトする。
そして config ディレクトリの下に 2 つの
ファイルを別々に作成する。

# 準備作業
cd ~/svnwork
# trunk をチェックアウト
svn co http://svnserver/svn/hoge/trunk trunk
# branch をチェックアウト
svn co http://svnserver/svn/hoge/branch/1.0 1.0

あとは以下のように config を分ける。

# config/development.conf
SOURCE=$HOME/svnwork/trunk
REMOTE_USER=deploy
REMOTE_HOST=server-dev

# config/production.conf
SOURCE=$HOME/svnwork/1.0
REMOTE_USER=deploy
REMOTE_HOST=server-production

deploy.sh の引数で config ファイルを指定できる。


======
テスト
======

 instant-deployer にはユニットテスト機構があり
本番環境で動作させる前にテスト実行してエビデンスを
取得することができる。

 bin/deploy.sh の引数に設定ファイル名を指定すること
ができる。

 例えば以下のように test/test.conf を指定することで
本来とは異なるテスト用の設定で処理を実行できる。
bin/deploy.sh test/test.conf

 また --test が引数に指定されると test/test.conf が
指定されたものと見なされる。
bin/deploy.sh --test

 設定ファイルで以下の通り記述することで rsync 等が
実際には実行されずテスト実行される。
DRY_RUN=true
(ログには出力される)

 本ソフトウェアを改変したり機能追加する場合においても
あらかじめユニットテストを作成し、それらが正常終了する
状態を目指して開発していくことが望ましい。


====
ログ
====

 ログは設定ファイルの JOBLOG で指定したファイルに
追記される。ユニットテストの場合でも DRY_RUN=true の
場合でもログは出力される。

 以下はログファイルのサンプルである。


*** bin/deploy.sh: Job start at skylle on 2011/10/27 17:20:08
- module loader loaded
- module updater loaded
git pull
From github.com:id774/instant-deployer
   cbc3570..dc085eb  master     -> origin/master
Updating cbc3570..dc085eb
Fast-forward
 README.md          |   24 ++++
 bin/deploy.sh      |    2 +-
 config/deploy.conf |   14 +-
 doc/COPYING        |   55 +++++++++
 doc/COPYING.ja     |   51 ++++++++
 doc/GPL            |  340 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 doc/README.ja      |  274 ++++++++++++++++++++++++++++++++++++++++++
 installer.sh       |   50 ++++++++
 lib/deployer.sh    |    6 +-
 lib/reloader.sh    |    1 +
 lib/updater.sh     |    2 +
 test/test.conf     |   47 +++++++
 12 files changed, 855 insertions(+), 11 deletions(-)
 create mode 100644 doc/COPYING
 create mode 100644 doc/COPYING.ja
 create mode 100644 doc/GPL
 create mode 100644 doc/README.ja
 create mode 100755 installer.sh
 create mode 100644 test/test.conf
- module deployer loaded
* Executing deploy with rsync on 2011/10/27 17:20:13
rsync --force --delete -e ssh -av --exclude-from=/home/debian/instant-deployer/bin/../etc/deploy_exclude --dry-run /home/debian/source debian@harpuia:/tmp/
sending incremental file list
source/
source/README.md
source/installer.sh
source/bin/
source/bin/deploy.sh
source/config/
source/config/deploy.conf
source/doc/
source/doc/COPYING
source/doc/COPYING.ja
source/doc/GPL
source/doc/README.ja
source/etc/
source/etc/deploy_exclude
source/lib/
source/lib/deployer.sh
source/lib/loader.sh
source/lib/reloader.sh
source/lib/updater.sh
source/test/
source/test/test.conf

sent 546 bytes  received 82 bytes  1256.00 bytes/sec
total size is 38522  speedup is 61.34 (DRY RUN)
Return code is 0
- module permission loaded
ssh -l debian harpuia chown -R www-data:www-data /tmp/sample_app
- module reloader loaded
ssh -l debian harpuia /etc/init.d/apache restart
*** bin/deploy.sh: End of Job at skylle on 2011/10/27 17:20:13


 この例では git リポジトリからソースコードを取得し
リモートサーバーに対して rsync にてデプロイ、その後
パーミッションを設定して apache を再起動している。
(DRY_RUN=true)


